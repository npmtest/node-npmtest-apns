{"/home/travis/build/npmtest/node-npmtest-apns/test.js":"/* istanbul instrument in package npmtest_apns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apns/lib.npmtest_apns.js":"/* istanbul instrument in package npmtest_apns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apns = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apns = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apns/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apns && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apns\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apns.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apns.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apns.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apns.__dirname + '/lib.npmtest_apns.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apns/node_modules/apns/index.js":"exports.Connection = require(\"./lib/connection\").Connection;\nexports.Errors = require(\"./lib/connection\").Errors;\nexports.Notification = require(\"./lib/notification\").Notification;\nexports.Device = require(\"./lib/notification\").Device;","/home/travis/build/npmtest/node-npmtest-apns/node_modules/apns/lib/connection.js":"var FileLoader = require(\"./file-loader\").FileLoader,\n    tls = require('tls'),\n    extend = require(\"./util\").extend,\n    int2buf = require(\"./util\").int2buf,\n    bytes2int = require(\"./util\").bytes2int,\n    Q = require(\"q\"),\n    Buffer = require('buffer').Buffer;\n\nif(typeof Errors === \"undefined\")\n   Errors = {\n         'noErrorsEncountered': 0,\n         'processingError': 1,\n         'missingDeviceToken': 2,\n         'missingTopic': 3,\n         'missingPayload': 4,\n         'invalidTokenSize': 5,\n         'invalidTopicSize': 6,\n         'invalidPayloadSize': 7,\n         'invalidToken': 8,\n         'none': 255\n   };\n\nif(typeof fileLoader === \"undefined\")\n   fileLoader = new FileLoader();\n\n/**\n * Create a connection\n * @param object options Options\n */\nvar Connection = function(options)\n{\n   // Default options\n   this.options = {\n      certFile : null,\n      keyFile : null,\n      certData : null,\n      keyData : null,\n      passphrase : null,\n      gateway : \"gateway.push.apple.com\",\n      port : 2195,\n      enhanced : true,\n      errorCallback : null,\n      cacheLength : 1000,\n      connectionTimeout : 600000, //10 minutes\n      debug : false\n   };\n   \n   extend(this.options, options);\n   \n   this.initialized = false;\n   \n   this.cert = undefined;\n   this.key = undefined;\n   this.passphrase = undefined;\n   \n   this.tlsConnection = null;\n   this.writeBuffer = [];\n   \n   this.initializeDeferred = null;\n   this.openSocketDeferred = null;\n   \n   this.currentId = 0;\n   this.cachedNotifications = [];\n   \n   this.connectionTimeoutInterval = null;\n};\n\n/**\n * Check if the connection is initialized\n * @return boolean\n */\nConnection.prototype.checkInitialized = function()\n{\n   if(this.key && this.cert)\n      this.initializeDeferred.resolve();\n};\n\n/**\n * Initialize connection\n */\nConnection.prototype.initialize = function()\n{\n   if(this.initializeDeferred)\n      return this.initializeDeferred.promise;\n   else\n      this.initializeDeferred = Q.defer();\n   \n   if(typeof this.options.passphrase === \"string\")\n      this.passphrase = this.options.passphrase;\n   \n   var k = this;\n   \n   if(this.options.certData)\n   {\n      this.cert = this.options.certData;\n   }\n   else if(this.options.certFile)\n   {\n      fileLoader.load(this.options.certFile, function(data){\n         k.cert = data;\n         k.checkInitialized();\n      });\n   }\n   \n   if(this.options.keyData)\n   {\n      this.key = this.options.keyData;\n   }\n   else if(this.options.keyFile)\n   {\n      fileLoader.load(this.options.keyFile, function(data){\n         k.key = data;\n         k.checkInitialized();\n      });\n   }\n   \n   return this.initializeDeferred.promise;\n};\n\nConnection.prototype.log = function(message)\n{\n   this.options.debug && console.log(\"[\" + new Date() + \"] \" + message);\n};\n\n/**\n * Open socket\n */\nConnection.prototype.openSocket = function()\n{\n   this.log(\"open socket\");\n   \n   if(this.tlsConnection !== null\n   && (this.tlsConnection.readyState === \"open\" || this.tlsConnection.readyState === \"opening\"))\n      return this.openSocketDeferred.promise;\n   else\n   {\n      if(this.openSocketDeferred)\n         return this.openSocketDeferred.promise;\n      else\n         this.openSocketDeferred = Q.defer();\n   }\n   \n   this.initialize().then(function()\n   {\n      var tlsConnectionOptions = {};\n      \n      if(this.key)\n         tlsConnectionOptions.key = this.key;\n      \n      if(this.cert)\n         tlsConnectionOptions.cert = this.cert;\n      \n      if(this.passphrase)\n         tlsConnectionOptions.passphrase = this.passphrase;\n      \n      var k = this;\n      \n      this.tlsConnection = tls.connect(\n      this.options['port'],\n      this.options['gateway'],\n      tlsConnectionOptions,\n      function(){\n         if (!this.authorized)\n            throw this.authorizationError;\n         \n         if(k.connectionTimeoutInterval)\n            clearInterval(k.connectionTimeoutInterval);\n         \n         k.connectionTimeoutInterval = setTimeout(k.destroyTlsConnection.bind(k), k.options.connectionTimeout);\n         \n         k.drain();\n         k.openSocketDeferred.resolve();\n      });\n      \n      this.tlsConnection.on(\"data\", this.handleTransmissionError.bind(this));\n      this.tlsConnection.on(\"error\", this.destroyTlsConnection.bind(this));\n      this.tlsConnection.on(\"drain\", this.drain.bind(this));\n      this.tlsConnection.on(\"end\", this.resetTlsConnection.bind(this));\n      this.tlsConnection.once(\"close\", this.resetTlsConnection.bind(this));\n      \n   }.bind(this));\n   \n   return this.openSocketDeferred.promise;\n};\n\n/**\n * Drain notifications\n */\nConnection.prototype.drain = function()\n{\n   this.log(\"drain\");\n   \n   if(this.tlsConnection && this.tlsConnection.socket.bufferSize !== 0)\n      return;\n   \n   while(this.writeBuffer.length && this.tlsConnection && this.tlsConnection.socket.bufferSize === 0)\n   {\n      this.sendNotification(this.writeBuffer.shift());\n   }\n};\n\n/**\n * Destroy the connection\n */\nConnection.prototype.destroyTlsConnection = function()\n{\n   this.log(\"destroySoon\");\n   \n   if(this.tlsConnection)\n   {\n      this.tlsConnection.destroySoon();\n   }\n};\n\n/**\n * Clear the connection\n */\nConnection.prototype.resetTlsConnection = function()\n{\n   this.log(\"clear\");\n   \n   if(this.tlsConnection)\n      this.tlsConnection.removeAllListeners();\n   \n   this.tlsConnection = null;\n   this.openSocketDeferred = null;\n   \n   if(this.writeBuffer.length)\n      this.openSocket();\n};\n\n/**\n * Notify an error\n * @param number errorCode\n * @param Notification notification\n */\nConnection.prototype.notifyError = function(errorCode, notification)\n{\n   if(typeof this.options.errorCallback === 'function')\n      this.options.errorCallback(errorCode, notification);\n};\n\n/**\n * Catch notification error return by Apple server\n * @param Buffer data Data\n */\nConnection.prototype.handleTransmissionError = function(data)\n{\n   if (data[0] == 8)\n   {\n      var errorCode = data[1],\n      identifier = bytes2int(data.slice(2, 6), 4),\n      notification = undefined,\n      count,\n      i;\n\n      while(this.cachedNotifications.length)\n      {\n         notification = this.cachedNotifications.shift();\n\n         if(notification._uid == identifier)\n            break;\n      }\n\n      this.notifyError(errorCode, notification);\n      \n      count = this.cachedNotifications.length;\n\n      for (i = 0; i < count; i++)\n      {\n         notification = this.cachedNotifications.shift();\n         this.writeBuffer.push(notification);\n         \n         this.log(\"Catch error, add buffer : \" + notification.device.token.toString(\"hex\"));\n      }\n      \n      this.destroyTlsConnection();\n   }\n};\n\n/**\n * Cache notification\n * @param Notification notification\n */\nConnection.prototype.cacheNotification = function(notification)\n{\n   this.cachedNotifications.push(notification);\n\n   if (this.cachedNotifications.length > this.options.cacheLength)\n   {\n      this.cachedNotifications.shift();\n   }\n};\n\n/**\n * Send notification\n * @param Notification notification\n */\nConnection.prototype.sendNotification = function(notification)\n{\n   this.log(\"Send : \" + notification.device.token.toString(\"hex\"));\n   \n   this.openSocket().then(function()\n   {\n      if(this.tlsConnection.socket.bufferSize !== 0 || !this.tlsConnection.writable)\n      {\n         this.writeBuffer.push(notification);\n         return ;\n      }\n         \n      var encoding = \"utf8\",\n      token = notification.device.token,\n      message = JSON.stringify(notification),\n      messageLength = Buffer.byteLength(message, encoding),\n      pos = 0,\n      data;\n      \n      if (typeof token === \"undefined\")\n      {\n         this.notifyError(Errors['missingDeviceToken'], notification);\n         return ;\n      }\n\n      if (messageLength > 256)\n      {\n         this.notifyError(Errors['invalidPayloadSize'], notification);\n         return ;\n      }\n\n      if (notification.encoding)\n      {\n         encoding = notification.encoding;\n      }\n\n      notification._uid = this.currentId++;\n\n      if (this.options.enhanced === true)\n      {\n         data = new Buffer(1 + 4 + 4 + 2 + token.length + 2 + messageLength);\n         data[pos] = 1;\n         pos++;\n\n         pos += int2buf(notification._uid, data, pos, 4);\n\n         pos += int2buf(notification.expiry, data, pos, 4);\n      }\n      else\n      {\n         data = new Buffer(1 + 2 + token.length + 2 + messageLength);\n         data[pos] = 0;\n         pos++;\n      }\n\n      pos += int2buf(token.length, data, pos, 2);\n      pos += token.copy(data, pos, 0);\n      pos += int2buf(messageLength, data, pos, 2);\n      data.write(message, pos, encoding);\n      \n      this.cacheNotification(notification);\n      \n      this.tlsConnection.write(data);\n      this.log(\"Write : \" + notification.device.token.toString(\"hex\"));\n      \n   }.bind(this));\n};\n\n\nexports.Connection = Connection;\nexports.Errors = Errors;","/home/travis/build/npmtest/node-npmtest-apns/node_modules/apns/lib/file-loader.js":"var fs = require('fs');\n\n/**\n * Create a file loader\n */\nvar FileLoader = function()\n{\n   /**\n    * Files\n    * @type object\n    */\n   this.files = {};\n};\n\n/**\n * Load file\n * @param string file File\n * @param function callback Callback\n */\nFileLoader.prototype.load = function(file, callback)\n{\n   if(typeof this.files[file] !== \"undefined\")\n   {\n      if(this.files[file].loaded === true)\n      {\n         callback(this.files[file].data);\n         return;\n      }\n   }\n   else\n   {\n      if(typeof this.files[file] === \"undefined\")\n      {\n         this.files[file] = {};\n         this.files[file].loaded = false;\n         this.files[file].data = null;\n         this.files[file].callbacks = [];\n\n         var k = this;\n\n         fs.readFile(file, function (err, data)\n         {\n            if (err) throw err;\n            \n            k.files[file].data = data;\n            k.files[file].loaded = true;\n\n            var i;\n            for(i = 0; i < k.files[file].callbacks.length; i++)\n            {\n               k.files[file].callbacks[i].call(k, data);\n            }\n         });\n      }\n   }\n\n   this.files[file].callbacks.push(callback);\n};\n\nexports.FileLoader = FileLoader;","/home/travis/build/npmtest/node-npmtest-apns/node_modules/apns/lib/util.js":"/**\n * Extend function\n * @param object target\n */\nvar extend = function(target)\n{\n   var ar = [];\n   ar.slice.call(arguments, 1).forEach(function(source) {\n      for (key in source)\n        if (source[key] !== undefined)\n          target[key] = source[key];\n   });\n};\n\n/**\n * Add integer into a buffer\n * @param int number\n * @param Buffer buffer\n * @param int start\n * @param int length\n * @return number the length\n */\nvar int2buf = function (number, buffer, start, length) {\n   length -= 1;\n   for (var i = 0; i <= length; i++) {\n      buffer[start + length - i] = number & 0xff;\n      number = number >> 8;\n   }\n   return length + 1;\n};\n\n/**\n * Convert bytes to integer\n * @param Buffer bytes\n * @param int length\n * @param int start\n * @return number\n */\nvar bytes2int = function (bytes, length, start) {\n   if (start === undefined) start = 0;\n   var num = 0;\n   length -= 1;\n   for (var i = 0; i <= length; i++) {\n      num += (bytes[start + i] << ((length - i) * 8));\n   }\n   return num;\n};\n\nexports.extend = extend;\nexports.bytes2int = bytes2int;\nexports.int2buf = int2buf;","/home/travis/build/npmtest/node-npmtest-apns/node_modules/apns/lib/notification.js":"var Buffer = require('buffer').Buffer;\n\n/**\n * Create notification\n */\nvar Notification = function ()\n{\n   this.payload = {};\n   this.expiry = 0;\n   this.identifier = 0;\n   this.device;\n\n   this.alert = undefined;\n   this.badge = undefined;\n   this.sound = undefined;\n};\n\n/**\n * JSON serialization\n */\nNotification.prototype.toJSON = function ()\n{\n   if(this.payload === undefined)\n      this.payload = {};\n   \n   if(this.payload.aps === undefined)\n      this.payload.aps = {};\n   \n   if(typeof this.badge === \"number\")\n      this.payload.aps.badge = this.badge;\n   \n   if(typeof this.sound === \"string\")\n      this.payload.aps.sound = this.sound;\n   \n   if(typeof this.alert === \"string\" || typeof this.alert == \"object\")\n      this.payload.aps.alert = this.alert;\n   \n   return this.payload;\n};\n\n/**\n * Device\n * @param mixed deviceToken\n * @param boolean ascii\n */\nvar Device = function (token)\n{\n   var self = this;\n   self.token = undefined;\n   \n   self.setToken(token);\n};\n\n/**\n * Convert ascii token to Buffer token\n * @param string token\n * @return Buffer\n */\nDevice.prototype.parseToken = function (token)\n{\n   token = token.replace(/\\s/g, \"\");\n   var length = Math.ceil(token.length / 2);\n   var hexToken = new Buffer(length);\n   for (var i = 0; i < token.length; i += 2)\n   {\n      var word = token[i];\n      \n      if ((i + 1) >= token.length || typeof(token[i + 1]) === undefined)\n         word += '0';\n      else\n         word += token[i + 1];\n      \n      hexToken[i / 2] = parseInt(word, 16);\n   }\n   \n   return hexToken;\n};\n\n/**\n * Set the token\n * @param mixed newToken\n */\nDevice.prototype.setToken = function (newToken)\n{\n   if(typeof newToken === \"string\")\n      newToken = this.parseToken(newToken);\n   \n   this.token = newToken;\n   \n   return this;\n};\n\n/**\n * Return the hexadecimal token in string\n * @return string\n */\nDevice.prototype.hexToken = function ()\n{\n   var out = [];\n   var len = this.token.length;\n   var n;\n   for (var i = 0; i < len; i++)\n   {\n      n = this.token[i];\n      if (n < 16) out[i] = \"0\" + n.toString(16);\n      else out[i] = n.toString(16);\n   }\n   \n   return out.join(\"\");\n};\n\nexports.Notification = Notification;\nexports.Device = Device;"}